# map genes to complex
genes2complex <- map_df(unlist(unique(yeast_roi_alpha$set_genotype)), function(x) {
complex_list <- list()
for (i in 1:length(ComplexPortal_slim$genes)) {
if (x %in% ComplexPortal_slim$genes[[i]]) {
complex_list[[length(complex_list) + 1]] <- ComplexPortal_slim$Complex_ac[i]
}
}
tibble(gene = x, complex = list(complex_list))
})
genes2complex$num=sapply(genes2complex$complex, length)
# filter out genes with no complex
genes2complex <- genes2complex[genes2complex$num > 0, ]
# build dataframe for plotting
lifes_set_alpha_complex_df <- data.frame()
for (i in 1:length(genes2complex$gene)){
g=genes2complex$gene[i]
lifespan=lifes_set_alpha_df$mean_rela[lifes_set_alpha_df$gene==g]
steep=lifes_set_alpha_df$steepness_rela[lifes_set_alpha_df$gene==g]
complex_vector=unlist(genes2complex$complex[[i]])
for (j in 1:length(complex_vector)){
complex=complex_vector[j]
# add new row to the dataframe
lifes_set_alpha_complex_df <- rbind(lifes_set_alpha_complex_df,
data.frame(gene=g, lifespan_rela=lifespan, steepness_rela=steep, complex=complex))
}
}
temp=counts_alpha[,c("gene","num_of_experi")]
# map num_of_experi to the new dataframe
lifes_set_alpha_complex_df$num_of_experi <- sapply(lifes_set_alpha_complex_df$gene, function(g) {
if (g %in% temp$gene) {
return(temp$num_of_experi[temp$gene == g])
} else {
return(NA)
}
})
rm(temp)
# count the number of genes in each complex
library(tidyverse)
counts_complex <- lifes_set_alpha_complex_df %>%
group_by(complex) %>%
summarise(num_genes = n_distinct(gene), .groups = 'drop')
################!!! FILTER CRETERIA I !!!################
good_complex=unlist(counts_complex[counts_complex$num_genes > 1, "complex"])
## plotting
library(ggplot2)
library(ggforce)
ggplot(lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex)) +
geom_mark_hull(alpha=0.2, colour=NA, expand=0.02,show.legend = FALSE) +
geom_point(alpha=1,show.legend=FALSE)+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT") +
# add a title
ggtitle("Lifespan and Steepness of Genes in Complexes") +
xlim(0,2)+ylim(0,4)+
theme_minimal()+
theme(legend.position = "none")
## add simulation
ggplot()+
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.025,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi), alpha=1,show.legend=FALSE)+
new_scale_color() +
geom_line(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para), size = 0.7) +
# geom_point(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para, shape = para)) +
scale_color_brewer(palette = "Set1", name = "Parameters") +
scale_shape_discrete(guide = "none")+
xlim(0,2)+ylim(0,2)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title="Lifespan and Steepness of Genes in Complexes with Simulation")+
theme_minimal()
## zoom into best complexes
selected_complexes=counts_complex$complex[order(-counts_complex$num_genes)][1:4]
ggplot(lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex)) +
geom_mark_hull(alpha=0.2, colour=NA, expand=0.02,show.legend = FALSE) +
geom_point(alpha=1,show.legend=FALSE)+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT") +
# add a title
ggtitle("Lifespan and Steepness of Genes in Complexes") +
xlim(0,2)+ylim(0,4)+
theme_minimal()+
theme(legend.position = "none")
## add simulation
ggplot()+
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.025,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% good_complex,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi), alpha=1,show.legend=FALSE)+
new_scale_color() +
geom_line(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para), size = 0.7) +
# geom_point(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para, shape = para)) +
scale_color_brewer(palette = "Set1", name = "Parameters") +
scale_shape_discrete(guide = "none")+
xlim(0,2)+ylim(0,2)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title="Lifespan and Steepness of Genes in Complexes with Simulation")+
theme_minimal()
## zoom into best complexes
selected_complexes=counts_complex$complex[order(-counts_complex$num_genes)][1:4]
lifes_set_alpha_complex_df$description <- sapply(lifes_set_alpha_complex_df$complex, function(x) {
if (x %in% ComplexPortal_slim$Complex_ac) {
return(ComplexPortal_slim$Recommended_name[ComplexPortal_slim$Complex_ac == x])
} else {
return(NA)
}
})
ggplot()+
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% selected_complexes,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.025,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% selected_complexes,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi), alpha=1)+
new_scale_color() +
geom_line(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para), size = 1,alpha=1) +
# geom_point(data = simu_long, aes(x = lifespan_rela, y = steepness_rela, color = para, group = para, shape = para)) +
scale_color_brewer(palette = "Set2", name = "Parameters") +
scale_shape_discrete(guide = "none")+
# xlim(0.2,2)+ylim(0.2,2)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title="Lifespan and Steepness of Genes in Complexes with Simulation (Zoom into Best Complexes)")+
theme_minimal()
### prepare for enrichment
complex_df=ComplexPortal_slim[ComplexPortal_slim$Complex_ac %in% good_complex,]
complex_df=merge(complex_df,counts_complex,by.x="Complex_ac",by.y="complex",all=FALSE)
complex_df$ratio_genes_exist=as.numeric(complex_df$num_genes)/as.numeric(complex_df$num_all_genes)
################!!! FILTER CRETERIA II !!!################
complex_df=complex_df[complex_df$ratio_genes_exist>0.5,]
############### HARD clustering
distance_short_df=distance_df[,c("gene","eta_rela","epsilon_rela","xc_rela","scaling_rela")]
rownames(distance_short_df)=distance_short_df$gene; distance_short_df=subset(distance_short_df,select=-gene)
distance_short_df$hard_cluster=apply(distance_short_df, 1, function(x) names(distance_short_df)[which.min(x)])
distance_short_df$hard_cluster=gsub("_rela","",distance_short_df$hard_cluster)
# see percentage
arr=as.character(distance_short_df$hard_cluster);arr=prop.table(table(arr));label=paste(names(arr),round(100*arr,2),"%")
pie(arr,labels = label,main="percentage of each hard-cluster #genes assigned");rm(arr);rm(label)
N = length(distance_short_df$hard_cluster) #（总基因数）
K_eta = length(distance_short_df$hard_cluster[distance_short_df$hard_cluster=='eta']) #（属于eta类的基因）
K_epsilon = length(distance_short_df$hard_cluster[distance_short_df$hard_cluster=='epsilon'])
K_xc = length(distance_short_df$hard_cluster[distance_short_df$hard_cluster=='xc'])
K_scaling = length(distance_short_df$hard_cluster[distance_short_df$hard_cluster=='scaling'])
for (i in 1:length(complex_df$Complex_ac)){
n=complex_df$num_genes[i]
genes=unlist(complex_df$genes[i])
temp=na.omit(distance_short_df[genes,])
k_eta=    length(temp[temp$hard_cluster=='eta',1])
k_epsilon=length(temp[temp$hard_cluster=='epsilon',1])
k_xc=     length(temp[temp$hard_cluster=='xc',1])
k_scaling=length(temp[temp$hard_cluster=='scaling',1])
complex_df$HARD_eta_p[i]=phyper(q = k_eta - 1, m = K_eta, n = N - K_eta, k = n, lower.tail = FALSE)
complex_df$HARD_epsilon_p[i]=phyper(q = k_epsilon - 1, m = K_epsilon, n = N - K_epsilon, k = n, lower.tail = FALSE)
complex_df$HARD_xc_p[i]=phyper(q = k_xc - 1, m = K_xc, n = N - K_xc, k = n, lower.tail = FALSE)
complex_df$HARD_scaling_p[i]=phyper(q = k_xc - 1, m = K_xc, n = N - K_xc, k = n, lower.tail = FALSE)
}
############### SOFT clustering
distance_weight_df=subset(distance_short_df,select=-hard_cluster)
# distance_weight_df=1/distance_weight_df
# distance_weight_df=as.data.frame(t(apply(distance_weight_df, 1, function(x) x / sum(x, na.rm = TRUE))))
# see the propotion
temp=colSums(distance_weight_df);temp=temp/sum(temp);label=paste(names(temp),round(100*temp,2),"%")
pie(temp,labels = label,main="percentage of sum of weights of genes")
## calculate p-value for each complex
generate_null_dist <- function(n,N=1000,weight_df){
gene_list=as.character(rownames(weight_df))
result=matrix(NA,nrow = N,ncol=ncol(weight_df))
for (i in 1:N){
gene_null=sample(gene_list, n, replace = FALSE)
temp=weight_df[gene_null,]
scores=colSums(temp)
result[i,]=scores
}
colnames(result)=colnames(weight_df)
result=as.data.frame(result)
return(result)
}
# temp=generate_null_dist(5,1000,distance_weight_df)
for (i in 1:length(complex_df$Complex_ac)){
n=complex_df$num_genes[i]
genes=unlist(complex_df$genes[i])
temp=na.omit(distance_weight_df[genes,])
scores=colSums(temp)
N_sample=2000
scores_null=generate_null_dist(n,N_sample,distance_weight_df)
count_vector <- lapply(1:length(scores), function(j) {
sum(scores_null[[j]] < scores[j])
})
count_vector <- unlist(count_vector);names(count_vector)=names(temp)
complex_df$SOFT_eta_p[i]=(count_vector["eta_rela"]+1)/(N_sample+1)
complex_df$SOFT_epsilon_p[i]=(count_vector["epsilon_rela"]+1)/(N_sample+1)
complex_df$SOFT_xc_p[i]=(count_vector["xc_rela"]+1)/(N_sample+1)
complex_df$SOFT_scaling_p[i]=(count_vector["scaling_rela"]+1)/(N_sample+1)
}
## ITS GREAT TO SET p critical = 0.05  :>
################!!! FILTER CRETERIA III !!!################
p_critical=0.05
complex_eta=subset(complex_df, SOFT_eta_p<p_critical)
complex_epsilon=subset(complex_df, SOFT_epsilon_p<p_critical)
complex_xc=subset(complex_df, SOFT_xc_p<p_critical)
complex_scaling=subset(complex_df, SOFT_scaling_p<p_critical)
## plot
plot_complex <-function(complex_selected,name,p_cri){
ggplot(data.frame(x = seq(0, 2, length.out = 1000)),aes(x=x))+
geom_hline(yintercept=1, color = "black",linewidth = 0.3)+
geom_line(aes(y = eta_x(x)),size = 0.3) +
geom_line(aes(y = epsilon_x(x)),size = 0.3) +
geom_line(aes(y = xc_x(x)),size = 0.3) +
geom_point(data=simu_long,aes(x=lifespan_rela,y=steepness_rela,color=para),size=0.5)+
scale_color_brewer(palette = "Set2", name = "Parameters") +
new_scale_color() +
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.03,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex), alpha=1)+
xlim(0,2)+ylim(0.2,3.5)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title=paste(name,": complexes with p-value < ",p_cri,sep = ""))+
theme_minimal()
}
plot_complex(complex_eta$Complex_ac,"eta",p_critical)
plot_complex(complex_epsilon$Complex_ac,"epsilon",p_critical)
plot_complex(complex_xc$Complex_ac,"Xc",p_critical)
plot_complex(complex_scaling$Complex_ac,"scaling",p_critical)
## ITS GREAT TO SET p critical = 0.05  :>
################!!! FILTER CRETERIA III !!!################
p_critical=0.025
complex_eta=subset(complex_df, SOFT_eta_p<p_critical)
complex_epsilon=subset(complex_df, SOFT_epsilon_p<p_critical)
complex_xc=subset(complex_df, SOFT_xc_p<p_critical)
complex_scaling=subset(complex_df, SOFT_scaling_p<p_critical)
## plot
plot_complex <-function(complex_selected,name,p_cri){
ggplot(data.frame(x = seq(0, 2, length.out = 1000)),aes(x=x))+
geom_hline(yintercept=1, color = "black",linewidth = 0.3)+
geom_line(aes(y = eta_x(x)),size = 0.3) +
geom_line(aes(y = epsilon_x(x)),size = 0.3) +
geom_line(aes(y = xc_x(x)),size = 0.3) +
geom_point(data=simu_long,aes(x=lifespan_rela,y=steepness_rela,color=para),size=0.5)+
scale_color_brewer(palette = "Set2", name = "Parameters") +
new_scale_color() +
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.03,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex), alpha=1)+
xlim(0,2)+ylim(0.2,3.5)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title=paste(name,": complexes with p-value < ",p_cri,sep = ""))+
theme_minimal()
}
plot_complex(complex_eta$Complex_ac,"eta",p_critical)
plot_complex(complex_epsilon$Complex_ac,"epsilon",p_critical)
plot_complex(complex_xc$Complex_ac,"Xc",p_critical)
plot_complex(complex_scaling$Complex_ac,"scaling",p_critical)
################## paste complexes together by GO annotations
complex_go_df=tibble(ComplexPortal[,c("Complex_ac","Go_Annotations")])
## ITS GREAT TO SET p critical = 0.05  :>
################!!! FILTER CRETERIA III !!!################
p_critical=0.05
complex_eta=subset(complex_df, SOFT_eta_p<p_critical)
complex_epsilon=subset(complex_df, SOFT_epsilon_p<p_critical)
complex_xc=subset(complex_df, SOFT_xc_p<p_critical)
complex_scaling=subset(complex_df, SOFT_scaling_p<p_critical)
## plot
plot_complex <-function(complex_selected,name,p_cri){
ggplot(data.frame(x = seq(0, 2, length.out = 1000)),aes(x=x))+
geom_hline(yintercept=1, color = "black",linewidth = 0.3)+
geom_line(aes(y = eta_x(x)),size = 0.3) +
geom_line(aes(y = epsilon_x(x)),size = 0.3) +
geom_line(aes(y = xc_x(x)),size = 0.3) +
geom_point(data=simu_long,aes(x=lifespan_rela,y=steepness_rela,color=para),size=0.5)+
scale_color_brewer(palette = "Set2", name = "Parameters") +
new_scale_color() +
geom_mark_hull(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex, size=num_of_experi,group=complex,fill=complex),
alpha=0.2, colour=NA, expand=0.03,show.legend = FALSE) +
geom_point(data=lifes_set_alpha_complex_df[lifes_set_alpha_complex_df$complex %in% complex_selected,],
aes(x=lifespan_rela, y=steepness_rela,
color=complex), alpha=1)+
xlim(0,2)+ylim(0.2,3.5)+
theme(legend.position = "none")+
labs(x="Lifespan Relative to WT", y="Steepness Relative to WT",
title=paste(name,": complexes with p-value < ",p_cri,sep = ""))+
theme_minimal()
}
plot_complex(complex_eta$Complex_ac,"eta",p_critical)
plot_complex(complex_epsilon$Complex_ac,"epsilon",p_critical)
plot_complex(complex_xc$Complex_ac,"Xc",p_critical)
plot_complex(complex_scaling$Complex_ac,"scaling",p_critical)
################## paste complexes together by GO annotations
complex_go_df=tibble(ComplexPortal[,c("Complex_ac","Go_Annotations")])
complex_go_df$Go_Annotations=sapply(complex_go_df$Go_Annotations, function(x){
str=as.character(x)
vec=strsplit(str,"\\|")[[1]]
vec=gsub("\\(.*\\)","",vec)
return(list(vec))
})
complex_go_df <- complex_go_df %>%
unnest(Go_Annotations)
## documented into .xlsx
library(openxlsx)
View(ComplexPortal)
head(subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
head(subset(ComplexPortal, Complex_ac %in% complex_epsilon$Complex_ac))
## documented into .xlsx
library(openxlsx)
wb <- createWorkbook()
addWorksheet(wb, paste("eta(p<",p_critical,")",sep = ""))
writeData(wb, paste("eta(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
addWorksheet(wb, paste("epsilon(p<",p_critical,")",sep = ""))
writeData(wb, paste("epsilon(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
addWorksheet(wb, paste("xc(p<",p_critical,")",sep = ""))
writeData(wb, paste("xc(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
addWorksheet(wb, paste("scaling(p<",p_critical,")",sep = ""))
writeData(wb, paste("scaling(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
saveWorkbook(wb, "COMPLEXES_WITH_SIGNIFICANCE_PARAMETERS.xlsx", overwrite = TRUE)
## documented into .xlsx
library(openxlsx)
wb <- createWorkbook()
addWorksheet(wb, paste("eta(p<",p_critical,")",sep = ""))
writeData(wb, paste("eta(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_eta$Complex_ac))
addWorksheet(wb, paste("epsilon(p<",p_critical,")",sep = ""))
writeData(wb, paste("epsilon(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_epsilon$Complex_ac))
addWorksheet(wb, paste("xc(p<",p_critical,")",sep = ""))
writeData(wb, paste("xc(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_xc$Complex_ac))
addWorksheet(wb, paste("scaling(p<",p_critical,")",sep = ""))
writeData(wb, paste("scaling(p<",p_critical,")",sep = ""),
subset(ComplexPortal, Complex_ac %in% complex_scaling$Complex_ac))
saveWorkbook(wb, "COMPLEXES_WITH_SIGNIFICANCE_PARAMETERS.xlsx", overwrite = TRUE)
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(openxlsx)
setwd("./data/")
library(openxlsx)
setwd("./data/")
library(openxlsx)
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex_df.xlsx")
setwd("./data/")
library(openxlsx)
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex.xlsx")
inputPanel(
selectInput("parameters",label = "Complexes significantly close to the parameter: ",
choices = c("eta","epsilon","xc","scaling"), selected = "eta"),
selectInput("method",label = "Enrichment method: ",
choices = c("HARD","SOFT"), selected = "SOFT"),
sliderInput("p_critical",label = "Critical p-value:",
min=0,max=1,value=0.05,step=0.01)
)
setwd("./data/")
library(openxlsx)
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex.xlsx")
simu_long=read.xlsx("simu_long.xlsx")
simu_long=read_csv("simu_long.csv")
setwd("./data/")
# setwd("./data/")
library(openxlsx)
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex.xlsx")
simu_long=read.csv("simu_long.csv")
setwd("./data/")
rm()
?geom_mark_hull
??geom_mark_hull
setwd("./data/")
library(openxlsx)
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex.xlsx")
simu_long=read.csv("simu_long.csv")
source("C:/Users/20145/Desktop/westlake_summer/SR_similarity.R")
epsilon_x <- function(x){
(1087*exp((14357*x)/10000))/5000 + (672625547621055*exp((3917540578361239*x)/281474976710656))/9444732965739290427392
}
library(tidyverse)
## fitting results from MATLAB
eta_x <- function(x){
(1183*exp(-(969*x)/400))/625 + (12287*exp(-(3899*x)/10000))/10000
}
epsilon_x <- function(x){
(1087*exp((14357*x)/10000))/5000 + (672625547621055*exp((3917540578361239*x)/281474976710656))/9444732965739290427392
}
xc_x <- function(x){
(3089*x^(131/80))/5000 + 247/625
}
# equations
eta_eq <- function(x,x0,y0){
x0 - x + ((40336457*exp(-(5113*x)/10000))/50000000 + (81517107*exp(-(18397*x)/5000))/10000000)*((7889*exp(-(5113*x)/10000))/5000 - y0 + (4431*exp(-(18397*x)/5000))/2000)
}
epsilon_eq <- function(x,x0,y0){
x0 - x - ((15606059*exp((14357*x)/10000))/50000000 + (2635037876847932909866872287145*exp((3917540578361239*x)/281474976710656))/2658455991569831745807614120560689152)*((1087*exp((14357*x)/10000))/5000 - y0 + (672625547621055*exp((3917540578361239*x)/281474976710656))/9444732965739290427392)
}
xc_eq <- function(x,x0,y0){
x0 - x - (404659*x^(51/80)*((3089*x^(131/80))/5000 - y0 + 247/625))/400000
}
### find root for every data point
lifes_set_alpha_bp_short_df=map_df(unique(lifes_set_alpha_bp_df$gene),function(gene){
mean_mean_rela_bp=mean(lifes_set_alpha_bp_df$mean_rela_bootstrap[lifes_set_alpha_bp_df$gene==gene])
mean_steepness_rela_bp=mean(lifes_set_alpha_bp_df$steepness_rela_bootstrap[lifes_set_alpha_bp_df$gene==gene])
mean_skewness_rela_bp=mean(lifes_set_alpha_bp_df$skewness_rela_bootstrap[lifes_set_alpha_bp_df$gene==gene])
tibble(gene=gene,
mean_rela=mean_mean_rela_bp,
steepness_rela=mean_steepness_rela_bp,
skewness_rela=mean_skewness_rela_bp)
})
source("C:/Users/20145/Desktop/westlake_summer/SR_bioinfo.R")
warnings()
library(openxlsx)
setwd("./data/")
library(openxlsx)
library(ggplot2)
library(ggnewscale)
library(ggforce)
library(DT)
url_1="https://github.com/370126/yeast_aging/raw/refs/heads/main/data/complex_df_with_p_values.xlsx"
url_2="https://github.com/370126/yeast_aging/raw/refs/heads/main/data/lifes_set_alpha_complex.xlsx"
url_3="https://github.com/370126/yeast_aging/raw/refs/heads/main/data/simu_long.csv"
# fetch files from GitHub
download.file(url_1, destfile = "complex_df_with_p_values.xlsx", mode = "wb")
download.file(url_2, destfile = "lifes_set_alpha_complex.xlsx", mode = "wb")
download.file(url_3, destfile = "simu_long.csv", mode = "wb")
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
View(complex_df)
# check some points
temp=lifes_set_alpha_bp_short_df[1:5,]
lifes_set_alpha_complex_df=read.xlsx("lifes_set_alpha_complex.xlsx")
simu_long=read.csv("simu_long.csv")
eta_x <- function(x){
(1183*exp(-(969*x)/400))/625 + (12287*exp(-(3899*x)/10000))/10000
}
epsilon_x <- function(x){
(1087*exp((14357*x)/10000))/5000 + (672625547621055*exp((3917540578361239*x)/281474976710656))/9444732965739290427392
}
xc_x <- function(x){
(3089*x^(131/80))/5000 + 247/625
}
source("C:/Users/20145/Desktop/westlake_summer/SR_bioinfo.R")
source("C:/Users/20145/Desktop/westlake_summer/SR_similarity.R")
source("C:/Users/20145/Desktop/westlake_summer/SR_clustering.R")
View(complex_df)
knitr::opts_chunk$set(echo = TRUE)
# make new directory and set it as working directory
if(!dir.exists("./data/")){
dir.create("./data/")
}
setwd("./data/")
library(openxlsx)
library(ggplot2)
library(ggnewscale)
library(ggforce)
library(DT)
# fetch files from GitHub
url_1 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/complex_df_with_p_values.xlsx"
url_2 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/lifes_set_alpha_complex.xlsx"
url_3 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/simu_long.csv"
download.file(url_1, destfile = "complex_df_with_p_values.xlsx", mode = "wb", method = "libcurl")
download.file(url_2, destfile = "lifes_set_alpha_complex.xlsx", mode = "wb", method = "libcurl")
download.file(url_3, destfile = "simu_long.csv", mode = "wb", method = "libcurl")
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
# round numeric columns to 4 decimal places
complex_df[sapply(complex_df, is.numeric)] <- round(complex_df[sapply(complex_df, is.numeric)], 4)
# make new directory and set it as working directory
if(!dir.exists("./data/")){
dir.create("./data/")
}
setwd("./data/")
library(openxlsx)
library(ggplot2)
library(ggnewscale)
# fetch files from GitHub
url_1 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/complex_df_with_p_values.xlsx"
url_2 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/lifes_set_alpha_complex.xlsx"
url_3 <- "https://raw.githubusercontent.com/370126/yeast_aging/main/data/simu_long.csv"
download.file(url_1, destfile = "complex_df_with_p_values.xlsx", mode = "wb", method = "libcurl")
download.file(url_2, destfile = "lifes_set_alpha_complex.xlsx", mode = "wb", method = "libcurl")
download.file(url_3, destfile = "simu_long.csv", mode = "wb", method = "libcurl")
complex_df=read.xlsx("complex_df_with_p_values.xlsx")
# round numeric columns to 4 decimal places
complex_df[sapply(complex_df, is.numeric)] <- round(complex_df[sapply(complex_df, is.numeric)], 4)
# get complex URL
url_base="https://www.ebi.ac.uk/complexportal/complex/"
complex_df$Complex_URL=paste0(url_base,complex_df$Complex_ac)
# reorder columns to have Complex_ac and Complex_URL at the front
complex_df <- complex_df[, c("Complex_ac", "Complex_URL", setdiff(names(complex_df), c("Complex_ac", "Complex_URL")))]
gc()
